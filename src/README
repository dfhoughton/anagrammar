This is the configuration directory for the anagrammar command line utility.
If you can see this file, anagrammar is probably installed on your system. You
can get more details by running anagrammar --help. This file describes the rules
of anagrammar grammars.

Anagrammar Grammar
==================

A grammar consists of a list of rules. The first rule is the "top" rule of the
grammar. Any anagram generated will fit the pattern specified by this rule.

Rules provide a list of alternative patterns, usually just one:

  rule1 -> foo       # one alternative
  rule2 -> foo | bar # two alternatives, foo and bar

You can also specify alternative patterns simply by listing the rule twice:

  rule -> foo   # first alternative
  rule -> bar   # second alternative

The alternatives themselves specify a sequence of items that must occur
in the specified order:

  rule -> this then this

Finally, each item in a sequence can be modified by a repetition suffix:

  rule -> once         # no repetition modifier
  rule -> maybe?       # suffix is '?'; it means "zero or one"
  rule -> many+        # suffix is '+'; it means "one or more"
  rule -> many*        # suffix is '*'; it means "zero or more"
  rule -> these{2}     # suffix is '{2}'; it means "exactly two"
  rule -> several{2,3} # suffix is '{2,3}'; it means "two or three"
  rule -> lots{5,}     # suffix is '{5,}'; it means "five or more"

The items in a sequence may be either the names of other rules, or the names
of word lists:

  rule -> other_rule   # identifiers are always sequences of "word" characters -- roman alphabet letters, underscores, or digits
  rule -> <word_list>  # note the angle brackets

A grammar may contain blank lines: these will be ignored. Furthermore, a '#' and
whatever follows it is considered a comment and ignored. The quantity of
whitespace is ignored.

No optimization is done on a grammar, so it's up to the author to ensure,
for example, that the same rule isn't specified twice:

	TOP -> foo | bar
	foo -> <word>*
	bar -> <word>{0,}

The only exception to this lines which are *identical* after the normalization
of whitespace -- these will trigger an error.

WARNING
-------

Currently the code that compiles these grammars into automata cannot handle recursion, so
you can't do this

	rule -> rule | <foo>

or this

	rule       -> other_rule | <foo>
	other_rule -> rule{3,5}

or anything else that ultimately defines a rule in terms of itself. If you try to do this
you will get an error during grammar compilation.

If you want anagrammar to handle recursion, I welcome pull requests, but currently I do not
plan to implement this. Maybe ultimately my OCD will force me to do this, but I do not have
plans to do this in the near future.

Word Lists
==========

A word is a list of phrases, one per line. The case of phrases will be preserved.
If you list a word twice with different cases, each will be preserved as a possible
phrase in an anagram. For the purposes of computing anagrams only "word" characters
are considered. This is the actual Java code that does the normalization, if you
want the details:

		public char normalize(char c) {
			int i = c;
			if (Character.isLetter(i)) {
				if (Character.isUpperCase(i)) {
					return (char) Character.toLowerCase(i);
				} else {
					return c;
				}
			} else {
				return 0;   // these will be ignored
			}
		}

You should take care to make sure the phrases in your word lists are unique. Anagrammar
does not check this.